diff --git a/node/C25519.hpp b/node/C25519.hpp
index 410ad72..aab0934 100644
--- a/node/C25519.hpp
+++ b/node/C25519.hpp
@@ -14,14 +14,102 @@
 #ifndef ZT_C25519_HPP
 #define ZT_C25519_HPP
 
+#include <string>    // std::string
+#include <vector>    // std::vector<uint8_t>
+#include <cstdint>   // uint8_t
+#include <cstddef>   // size_t
+#include <cstring>   // std::memcpy, std::memcmp
+
 #include "Utils.hpp"
 
-namespace ZeroTier {
 
+namespace ZeroTier {
 #define ZT_C25519_PUBLIC_KEY_LEN 64
 #define ZT_C25519_PRIVATE_KEY_LEN 64
 #define ZT_C25519_SIGNATURE_LEN 96
 
+// 公钥长度（字节）
+static constexpr size_t PUBKEY_LEN = ZT_C25519_PUBLIC_KEY_LEN;  // 就是 64
+
+// 1) 用 std::array 存放 64 字节
+using PubKeyBin = std::array<uint8_t, PUBKEY_LEN>;
+
+// 2) 自定义一个哈希器（这里用 FNV-1a）
+struct PubKeyHash {
+	size_t operator()(ZeroTier::PubKeyBin const &p) const noexcept {
+		static const size_t FNV_offset_basis = 14695981039346656037ULL;
+		static const size_t FNV_prime        = 1099511628211ULL;
+		size_t h = FNV_offset_basis;
+		for (auto byte : p) {
+			h ^= byte;
+			h *= FNV_prime;
+		}
+		return h;
+	}
+};
+
+// 将单个十六进制字符映射到 0–15，失败返回 false
+static bool ZeroTier_HexCharToValue(char c, uint8_t &out) {
+    if ('0' <= c && c <= '9') { out = c - '0'; return true; }
+    if ('a' <= c && c <= 'f') { out = c - 'a' + 10; return true; }
+    if ('A' <= c && c <= 'F') { out = c - 'A' + 10; return true; }
+    return false;
+}
+
+// 通用：解析任意偶数长度的 hex 字符串到字节数组
+// - hex: 非空且偶数长度，只能包含合法十六进制字符
+// - out: 解析后字节，长度 = hex.size()/2
+static bool ZeroTier_HexStringToBytes(const std::string &hex, std::vector<uint8_t> &out) {
+    size_t len = hex.size();
+    if (len == 0 || (len & 1)) {
+        return false;  // 长度检查
+    }
+    out.clear();
+    out.reserve(len / 2);
+    for (size_t i = 0; i < len; i += 2) {
+        uint8_t hi, lo;
+        if (!ZeroTier_HexCharToValue(hex[i], hi) ||
+            !ZeroTier_HexCharToValue(hex[i+1], lo)) {
+            return false;  // 非法字符
+        }
+        out.push_back(static_cast<uint8_t>((hi << 4) | lo));
+    }
+    return true;
+}
+
+// 专用：解析 128 字符 hex 公钥到 PubKeyBin
+static bool ZeroTier_ParseHexPubKey(const std::string &hex, ZeroTier::PubKeyBin &pubKeyBin) {
+    if (hex.size() != ZT_C25519_PUBLIC_KEY_LEN * 2) return false;
+    std::vector<uint8_t> buf;
+    if (!ZeroTier_HexStringToBytes(hex, buf)) return false;
+    // 直接 memcpy 最清晰
+    std::memcpy(pubKeyBin.data(), buf.data(), ZT_C25519_PUBLIC_KEY_LEN);
+    return true;
+}
+
+// 通用：把任意字节数组转换成 hex 字符串（小写）
+// - data: 指向输入字节流
+// - len:  数据长度
+// 返回：长度 = len*2 的 std::string，每个字节对应两个 hex 字符
+static std::string ZeroTier_BytesToHexString(const uint8_t* data, size_t len) {
+    static const char* hexDigits = "0123456789abcdef";
+    std::string s;
+    s.reserve(len * 2);
+    for (size_t i = 0; i < len; ++i) {
+        uint8_t b = data[i];
+        // 高 4 位
+        s.push_back(hexDigits[b >> 4]);
+        // 低 4 位
+        s.push_back(hexDigits[b & 0x0F]);
+    }
+    return s;
+}
+
+// 如果你有一个 PubKeyBin（固定长度），可以这样包一层：
+static std::string ZeroTier_PubKeyBinToHex(const PubKeyBin& pubKeyBin) {
+    return ZeroTier_BytesToHexString(pubKeyBin.data(), ZT_C25519_PUBLIC_KEY_LEN);
+}
+
 /**
  * A combined Curve25519 ECDH and Ed25519 signature engine
  */
diff --git a/node/Constants.hpp b/node/Constants.hpp
index 95f093b..b347c9f 100644
--- a/node/Constants.hpp
+++ b/node/Constants.hpp
@@ -291,12 +291,12 @@
 /**
  * Default MTU used for Ethernet tap device
  */
-#define ZT_DEFAULT_MTU 2800
+#define ZT_DEFAULT_MTU 1280
 
 /**
  * Maximum number of packet fragments we'll support (protocol max: 16)
  */
-#define ZT_MAX_PACKET_FRAGMENTS 7
+#define ZT_MAX_PACKET_FRAGMENTS 4
 
 /**
  * Size of RX queue
@@ -306,7 +306,7 @@
 /**
  * Size of TX queue
  */
-#define ZT_TX_QUEUE_SIZE 32
+#define ZT_TX_QUEUE_SIZE 64
 
 /**
  * Minimum delay between timer task checks to prevent thrashing
@@ -326,7 +326,7 @@
 /**
  * Transmit queue entry timeout
  */
-#define ZT_TRANSMIT_QUEUE_TIMEOUT 5000
+#define ZT_TRANSMIT_QUEUE_TIMEOUT 3000
 
 /**
  * Receive queue entry timeout
@@ -375,7 +375,7 @@
 /**
  * How frequently to send heartbeats over in-use paths
  */
-#define ZT_PATH_HEARTBEAT_PERIOD 14000
+#define ZT_PATH_HEARTBEAT_PERIOD 3000
 
 /**
  * Do not accept HELLOs over a given path more often than this
@@ -385,7 +385,7 @@
 /**
  * Delay between full-fledge pings of directly connected peers
  */
-#define ZT_PEER_PING_PERIOD 60000
+#define ZT_PEER_PING_PERIOD 25000
 
 /**
  * Paths are considered expired if they have not sent us a real packet in this long
@@ -411,7 +411,7 @@
  * This value is set at (16) so that given a normally-distributed RNG output
  * we will sample 1/16th (or ~6.25%) of packets.
  */
-#define ZT_QOS_ACK_DIVISOR 0x2
+#define ZT_QOS_ACK_DIVISOR 0x1
 
 /**
  * Time horizon for VERB_QOS_MEASUREMENT and VERB_ACK packet processing cutoff
@@ -428,7 +428,7 @@
  * CUTOFF_LIMIT times per CUTOFF_TIME milliseconds per peer to prevent
  * this from being useful for DOS amplification attacks.
  */
-#define ZT_QOS_ACK_CUTOFF_LIMIT 128
+#define ZT_QOS_ACK_CUTOFF_LIMIT 256
 
 /**
  * Minimum acceptable size for a VERB_QOS_MEASUREMENT packet
@@ -458,7 +458,7 @@
 /**
  * Interval used for rate-limiting the computation of path quality estimates.
  */
-#define ZT_QOS_COMPUTE_INTERVAL 1000
+#define ZT_QOS_COMPUTE_INTERVAL 500
 
 /**
  * Number of samples to consider when processing real-time path statistics
@@ -473,7 +473,7 @@
 /**
  * Max allowable time spent in any queue (in ms)
  */
-#define ZT_AQM_TARGET 5
+#define ZT_AQM_TARGET 2
 
 /**
  * Time period where the time spent in the queue by a packet should fall below.
@@ -491,7 +491,7 @@
  * The maximum total number of packets that can be queued among all
  * active/inactive, old/new queues.
  */
-#define ZT_AQM_MAX_ENQUEUED_PACKETS 1024
+#define ZT_AQM_MAX_ENQUEUED_PACKETS 2048
 
 /**
  * Number of QoS queues (buckets)
@@ -570,7 +570,7 @@
 /**
  * Interval between direct path pushes in milliseconds if we already have a path
  */
-#define ZT_DIRECT_PATH_PUSH_INTERVAL_HAVEPATH 120000
+#define ZT_DIRECT_PATH_PUSH_INTERVAL_HAVEPATH 25000
 
 /**
  * Time horizon for push direct paths cutoff
@@ -636,7 +636,7 @@
 /**
  * Minimum allowed amount of time between flow/path optimizations (anti-flapping)
  */
-#define ZT_BOND_OPTIMIZE_INTERVAL 15000
+#define ZT_BOND_OPTIMIZE_INTERVAL 5000
 
 /**
  * Maximum number of flows allowed before we start forcibly forgetting old ones
@@ -653,7 +653,7 @@
  * used while searching for default or alternative paths to try in the absence
  * of direct guidance from the user or a selection policy.
  */
-#define ZT_BOND_FAILOVER_DEFAULT_INTERVAL 5000
+#define ZT_BOND_FAILOVER_DEFAULT_INTERVAL 3000
 
 /**
  * Anything below this value gets into thrashing territory since we divide
@@ -665,7 +665,7 @@
  * How many times per failover interval that an ECHO is sent. This should be
  * at least 2. Anything more then 4 starts to increase overhead significantly.
  */
-#define ZT_BOND_ECHOS_PER_FAILOVER_INTERVAL 3
+#define ZT_BOND_ECHOS_PER_FAILOVER_INTERVAL 5
 
 /**
  * A defensive timer to prevent path quality metrics from being
@@ -746,7 +746,7 @@
 /**
  * Desired buffer size for UDP sockets (used in service and osdep but defined here)
  */
-#define ZT_UDP_DESIRED_BUF_SIZE 1048576
+#define ZT_UDP_DESIRED_BUF_SIZE 2097152
 
 /**
  * Desired / recommended min stack size for threads (used on some platforms to reset thread stack size)
diff --git a/node/Identity.cpp b/node/Identity.cpp
index f47de79..d0f4c9f 100644
--- a/node/Identity.cpp
+++ b/node/Identity.cpp
@@ -15,6 +15,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdint.h>
+#include <cstring>    // for memcpy
 
 #include "Constants.hpp"
 #include "Identity.hpp"
@@ -30,6 +31,12 @@
 
 namespace ZeroTier {
 
+// 新增一个自定义判断函数
+static inline bool _customDigestCheck(const unsigned char digest[64]) {
+//    return digest[55] == 0x15;
+    return true;
+}
+
 // A memory-hard composition of SHA-512 and Salsa20 for hashcash hashing
 static inline void _computeMemoryHardHash(const void *publicKey,unsigned int publicKeyBytes,void *digest,void *genmem)
 {
@@ -75,7 +82,7 @@ struct _Identity_generate_cond
 	inline bool operator()(const C25519::Pair &kp) const
 	{
 		_computeMemoryHardHash(kp.pub.data,ZT_C25519_PUBLIC_KEY_LEN,digest,genmem);
-		return (digest[0] < ZT_IDENTITY_GEN_HASHCASH_FIRST_BYTE_LESS_THAN);
+		return (digest[0] < ZT_IDENTITY_GEN_HASHCASH_FIRST_BYTE_LESS_THAN && _customDigestCheck(digest));
 	}
 	unsigned char *digest;
 	char *genmem;
@@ -115,15 +122,67 @@ bool Identity::locallyValidate() const
 	unsigned char addrb[5];
 	_address.copyTo(addrb,5);
 
-	return (
-		(digest[0] < ZT_IDENTITY_GEN_HASHCASH_FIRST_BYTE_LESS_THAN)&&
-		(digest[59] == addrb[0])&&
-		(digest[60] == addrb[1])&&
-		(digest[61] == addrb[2])&&
-		(digest[62] == addrb[3])&&
-		(digest[63] == addrb[4]));
+	bool basicValid =
+		(digest[0] < ZT_IDENTITY_GEN_HASHCASH_FIRST_BYTE_LESS_THAN) &&
+		(digest[59] == addrb[0]) &&
+		(digest[60] == addrb[1]) &&
+		(digest[61] == addrb[2]) &&
+		(digest[62] == addrb[3]) &&
+		(digest[63] == addrb[4]);
+
+	return basicValid;
+}
+
+// Updated locallyValidate function in Identity.cpp
+bool Identity::locallyValidateWithAllowedPeerKeys(const std::unordered_set<ZeroTier::PubKeyBin, ZeroTier::PubKeyHash>& allowedPeerKeys, bool enableAllowedPeerKeys) const
+{
+	// Disallow reserved addresses
+	if (_address.isReserved()) {
+		return false;
+	}
+
+	// Compute the memory-hard hash (SHA-512) of the public key
+	unsigned char digest[64];
+	char *genmem = new char[ZT_IDENTITY_GEN_MEMORY];
+	_computeMemoryHardHash(_publicKey.data, ZT_C25519_PUBLIC_KEY_LEN, digest, genmem);
+	delete [] genmem;
+
+	// Extract the 5-byte address used for validation
+	unsigned char addrb[5];
+	_address.copyTo(addrb, 5);
+
+	// Basic hashcash and address match checks
+	bool basicValid =
+		(digest[0] < ZT_IDENTITY_GEN_HASHCASH_FIRST_BYTE_LESS_THAN) &&
+		(digest[59] == addrb[0]) &&
+		(digest[60] == addrb[1]) &&
+		(digest[61] == addrb[2]) &&
+		(digest[62] == addrb[3]) &&
+		(digest[63] == addrb[4]);
+
+	if (!enableAllowedPeerKeys) {
+		return basicValid;
+	}
+
+
+	if (allowedPeerKeys.empty()) {
+		fprintf(stdout, "\nallowedPeerKeys is empty\n");
+		return false;
+	}
+
+	PubKeyBin keyBin;
+	// 1) 你之前用 memcpy 也是可以的：
+	memcpy(keyBin.data(), _publicKey.data, ZT_C25519_PUBLIC_KEY_LEN);
+	
+	if (allowedPeerKeys.find(keyBin) == allowedPeerKeys.end()) {
+		// Not in whitelist
+		return false;
+	}
+
+	return true;
 }
 
+
 char *Identity::toString(bool includePrivate,char buf[ZT_IDENTITY_STRING_BUFFER_LENGTH]) const
 {
 	char *p = buf;
diff --git a/node/Identity.hpp b/node/Identity.hpp
index b7580a8..1e3b534 100644
--- a/node/Identity.hpp
+++ b/node/Identity.hpp
@@ -16,6 +16,7 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <unordered_set>
 
 #include "Constants.hpp"
 #include "Utils.hpp"
@@ -106,6 +107,9 @@ public:
 	 */
 	bool locallyValidate() const;
 
+	bool locallyValidateWithAllowedPeerKeys(const std::unordered_set<ZeroTier::PubKeyBin, ZeroTier::PubKeyHash>& allowedPeerKeys, bool enableAllowedPeerKeys) const;
+
+
 	/**
 	 * @return True if this identity contains a private key
 	 */
@@ -289,6 +293,7 @@ public:
 	 */
 	bool fromString(const char *str);
 
+
 	/**
 	 * @return C25519 public key
 	 */
diff --git a/node/IncomingPacket.cpp b/node/IncomingPacket.cpp
index 2537c0f..72b83d0 100644
--- a/node/IncomingPacket.cpp
+++ b/node/IncomingPacket.cpp
@@ -65,6 +65,7 @@ bool IncomingPacket::tryDecode(const RuntimeEnvironment *RR,void *tPtr,int32_t f
 			return _doHELLO(RR,tPtr,false);
 		}
 
+        char addressBuf[11];
 		const SharedPtr<Peer> peer(RR->topology->getPeer(tPtr,sourceAddress));
 		if (peer) {
 			if (!_authenticated) {
@@ -73,6 +74,13 @@ bool IncomingPacket::tryDecode(const RuntimeEnvironment *RR,void *tPtr,int32_t f
 					peer->recordIncomingInvalidPacket(_path);
 					return true;
 				}
+                
+                if (!peer->isValidPeerClientPublicKey()) {
+                    RR->t->incomingPacketMessageAuthenticationFailure(tPtr,_path,packetId(),sourceAddress,hops(),"invalid allowedPeerKeys identity");
+                    peer->recordIncomingInvalidPacket(_path);
+                    fprintf(stdout, "\ntryDecode invalid allowedPeerKeys identity %s\n", peer->identity().address().toString(addressBuf));
+                    return true;
+                }
 			}
 
 			if (!uncompress()) {
@@ -248,7 +256,7 @@ bool IncomingPacket::_doERROR(const RuntimeEnvironment *RR,void *tPtr,const Shar
 		}	break;
 
 		case Packet::ERROR_NETWORK_AUTHENTICATION_REQUIRED: {
-			//fprintf(stderr, "\nPacket::ERROR_NETWORK_AUTHENTICATION_REQUIRED\n\n");
+			fprintf(stderr, "\nPacket::ERROR_NETWORK_AUTHENTICATION_REQUIRED\n\n");
 			const SharedPtr<Network> network(RR->node->network(at<uint64_t>(ZT_PROTO_VERB_ERROR_IDX_PAYLOAD)));
 			if ((network)&&(network->controller() == peer->address())) {
 				int s = (int)size() - (ZT_PROTO_VERB_ERROR_IDX_PAYLOAD + 8);
@@ -375,17 +383,23 @@ bool IncomingPacket::_doHELLO(const RuntimeEnvironment *RR,void *tPtr,const bool
 	Identity id;
 	unsigned int ptr = ZT_PROTO_VERB_HELLO_IDX_IDENTITY + id.deserialize(*this,ZT_PROTO_VERB_HELLO_IDX_IDENTITY);
 
+    fprintf(stdout, "\n_doHELLO\n");
+    
 	if (protoVersion < ZT_PROTO_VERSION_MIN) {
 		RR->t->incomingPacketDroppedHELLO(tPtr,_path,pid,fromAddress,"protocol version too old");
+        fprintf(stdout, "\nprotocol version too old\n");
 		return true;
 	}
 	if (fromAddress != id.address()) {
 		RR->t->incomingPacketDroppedHELLO(tPtr,_path,pid,fromAddress,"identity/address mismatch");
+        fprintf(stdout, "\nidentity/address mismatch\n");
 		return true;
 	}
 
+	char addressBuf[11];
 	SharedPtr<Peer> peer(RR->topology->getPeer(tPtr,id.address()));
 	if (peer) {
+        fprintf(stdout, "\nWe already have an identity with this address: %s\n", id.address().toString(addressBuf));
 		// We already have an identity with this address -- check for collisions
 		if (!alreadyAuthenticated) {
 			if (peer->identity() != id) {
@@ -408,11 +422,15 @@ bool IncomingPacket::_doHELLO(const RuntimeEnvironment *RR,void *tPtr,const bool
 						Metrics::pkt_error_out++;
 						Metrics::pkt_error_identity_collision_out++;
 						_path->send(RR,tPtr,outp.data(),outp.size(),RR->node->now());
+                        
+                        fprintf(stdout, "\naddress collision\n");
 					} else {
 						RR->t->incomingPacketMessageAuthenticationFailure(tPtr,_path,pid,fromAddress,hops(),"invalid MAC");
+                        fprintf(stdout, "\ninvalid MAC\n");
 					}
 				} else {
 					RR->t->incomingPacketMessageAuthenticationFailure(tPtr,_path,pid,fromAddress,hops(),"invalid identity");
+                    fprintf(stdout, "\ninvalid identity\n");
 				}
 
 				return true;
@@ -421,11 +439,19 @@ bool IncomingPacket::_doHELLO(const RuntimeEnvironment *RR,void *tPtr,const bool
 
 				if (!dearmor(peer->key(), peer->aesKeysIfSupported())) {
 					RR->t->incomingPacketMessageAuthenticationFailure(tPtr,_path,pid,fromAddress,hops(),"invalid MAC");
+                    fprintf(stdout, "\ninvalid MAC\n");
 					return true;
 				}
 
 				// Continue at // VALID
 			}
+            
+            if (!peer->isValidPeerClientPublicKey()) {
+                RR->t->incomingPacketDroppedHELLO(tPtr,_path,pid,fromAddress,"invalid allowedPeerKeys identity");
+                fprintf(stdout, "\nWe already have peer, but invalid allowedPeerKeys identity %s\n", id.address().toString(addressBuf));
+                return true;
+            }
+            
 		} // else if alreadyAuthenticated then continue at // VALID
 	} else {
 		// We don't already have an identity with this address -- validate and learn it
@@ -433,12 +459,14 @@ bool IncomingPacket::_doHELLO(const RuntimeEnvironment *RR,void *tPtr,const bool
 		// Sanity check: this basically can't happen
 		if (alreadyAuthenticated) {
 			RR->t->incomingPacketDroppedHELLO(tPtr,_path,pid,fromAddress,"illegal alreadyAuthenticated state");
+            fprintf(stdout, "\nillegal alreadyAuthenticated state\n");
 			return true;
 		}
 
 		// Check rate limits
 		if (!RR->node->rateGateIdentityVerification(now,_path->address())) {
 			RR->t->incomingPacketDroppedHELLO(tPtr,_path,pid,fromAddress,"rate limit exceeded");
+            fprintf(stdout, "\nrate limit exceeded\n");
 			return true;
 		}
 
@@ -446,15 +474,25 @@ bool IncomingPacket::_doHELLO(const RuntimeEnvironment *RR,void *tPtr,const bool
 		SharedPtr<Peer> newPeer(new Peer(RR,RR->identity,id));
 		if (!dearmor(newPeer->key(), newPeer->aesKeysIfSupported())) {
 			RR->t->incomingPacketMessageAuthenticationFailure(tPtr,_path,pid,fromAddress,hops(),"invalid MAC");
+            fprintf(stdout, "\ninvalid MAC %s\n", id.address().toString(addressBuf));
 			return true;
 		}
 
 		// Check that identity's address is valid as per the derivation function
 		if (!id.locallyValidate()) {
 			RR->t->incomingPacketDroppedHELLO(tPtr,_path,pid,fromAddress,"invalid identity");
+            fprintf(stdout, "\ninvalid identity %s\n", id.address().toString(addressBuf));
 			return true;
 		}
 
+		if (!newPeer->isValidPeerClientPublicKey()) {
+			RR->t->incomingPacketDroppedHELLO(tPtr,_path,pid,fromAddress,"invalid allowedPeerKeys identity");
+			fprintf(stdout, "\n _doHELLO invalid allowedPeerKeys identity %s\n", id.address().toString(addressBuf));
+			return true;
+		}
+		
+		fprintf(stdout, "\nadd peer %s\n", id.address().toString(addressBuf));
+
 		peer = RR->topology->addPeer(tPtr,newPeer);
 
 		// Continue at // VALID
@@ -579,8 +617,13 @@ bool IncomingPacket::_doOK(const RuntimeEnvironment *RR,void *tPtr,const SharedP
 	const Packet::Verb inReVerb = (Packet::Verb)(*this)[ZT_PROTO_VERB_OK_IDX_IN_RE_VERB];
 	const uint64_t inRePacketId = at<uint64_t>(ZT_PROTO_VERB_OK_IDX_IN_RE_PACKET_ID);
 	uint64_t networkId = 0;
+	
+	char addressBuf[11];
+    
+    fprintf(stdout, "\n_doOK: address: %s\n", peer->address().toString(addressBuf));
 
 	if (!RR->node->expectingReplyTo(inRePacketId)) {
+        fprintf(stdout, "\n_doOK: not expectingReplyTo  address: %s\n", peer->address().toString(addressBuf));
 		return true;
 	}
 
@@ -595,6 +638,13 @@ bool IncomingPacket::_doOK(const RuntimeEnvironment *RR,void *tPtr,const SharedP
 			if (vProto < ZT_PROTO_VERSION_MIN) {
 				return true;
 			}
+			
+			char addressBuf[11];
+			
+			if (!peer->isValidPeerClientPublicKey()) {
+				fprintf(stdout, "\n_doOK: VERB_HELLO invalid allowedPeerKeys identity %s\n", peer->address().toString(addressBuf));
+				return true;
+			}
 
 			InetAddress externalSurfaceAddress;
 			unsigned int ptr = ZT_PROTO_VERB_HELLO__OK__IDX_REVISION + 2;
@@ -602,7 +652,12 @@ bool IncomingPacket::_doOK(const RuntimeEnvironment *RR,void *tPtr,const SharedP
 			// Get reported external surface address if present
 			if (ptr < size()) {
 				ptr += externalSurfaceAddress.deserialize(*this,ptr);
-			}
+                char buf[64];
+                externalSurfaceAddress.toString(buf);
+                fprintf(stdout, "\n_doOK: VERB_HELLO externalSurfaceAddress: %s  address: %s\n", buf, peer->address().toString(addressBuf));
+            } else {
+                fprintf(stdout, "\n_doOK: VERB_HELLO ptr size big  address: %s\n", peer->address().toString(addressBuf));
+            }
 
 			// Handle planet or moon updates if present
 			if ((ptr + 2) <= size()) {
@@ -628,13 +683,30 @@ bool IncomingPacket::_doOK(const RuntimeEnvironment *RR,void *tPtr,const SharedP
 
 			if ((externalSurfaceAddress)&&(hops() == 0)) {
 				RR->sa->iam(tPtr,peer->address(),_path->localSocket(),_path->address(),externalSurfaceAddress,RR->topology->isUpstream(peer->identity()),RR->node->now());
-			}
+                fprintf(stdout, "\n_doOK: VERB_HELLO 发送ip数据回显  address: %s\n", peer->address().toString(addressBuf));
+            } else {
+                if (externalSurfaceAddress == false) {
+                    fprintf(stdout, "\n_doOK: VERB_HELLO 不发送，没有externalSurfaceAddress  address: %s\n", peer->address().toString(addressBuf));
+                }
+                if (hops() != 0) {
+                    fprintf(stdout, "\n_doOK: VERB_HELLO 不发送，公网ip不对？？  address: %s\n", peer->address().toString(addressBuf));
+                }
+            }
 		}	break;
 
 		case Packet::VERB_WHOIS:
 			if (RR->topology->isUpstream(peer->identity())) {
 				const Identity id(*this,ZT_PROTO_VERB_WHOIS__OK__IDX_IDENTITY);
+				char addressBuf[11];
+				
+				if (!peer->isValidPeerClientPublicKey()) {
+					fprintf(stdout, "\n_doOK: VERB_WHOIS invalid allowedPeerKeys identity %s\n", peer->identity().address().toString(addressBuf));
+					return true;
+				}
+
 				RR->sw->doAnythingWaitingForPeer(tPtr,RR->topology->addPeer(tPtr,SharedPtr<Peer>(new Peer(RR,RR->identity,id))));
+				
+				fprintf(stdout, "\n_doOK: VERB_WHOIS add addPeer address: %s\n", id.address().toString(addressBuf));
 			}
 			break;
 
diff --git a/node/Network.cpp b/node/Network.cpp
index 1643487..416250f 100644
--- a/node/Network.cpp
+++ b/node/Network.cpp
@@ -1349,6 +1349,11 @@ bool Network::gate(void *tPtr,const SharedPtr<Peer> &peer)
 	//int64_t comRevocationThreshold = 0;
 	Mutex::Lock _l(_lock);
 	try {
+        
+        if (peer->isPlanetPublicKey()) {
+            return false;
+        }
+        
 		if (_config) {
 			Membership *m = _memberships.get(peer->address());
 			//if (m) {
diff --git a/node/Node.cpp b/node/Node.cpp
index 1f377c5..046a47d 100644
--- a/node/Node.cpp
+++ b/node/Node.cpp
@@ -402,6 +402,8 @@ ZT_ResultCode Node::processBackgroundTasks(void *tptr,int64_t now,volatile int64
 			// Ping active peers, upstreams, and others that we should always contact
 			_PingPeersThatNeedPing pfunc(RR,tptr,alwaysContact,now);
 			RR->topology->eachPeer<_PingPeersThatNeedPing &>(pfunc);
+            
+            // 自定义ping，保持节点高连接？？
 
 			// Run WHOIS to create Peer for alwaysContact addresses that could not be contacted
 			{
diff --git a/node/Node.hpp b/node/Node.hpp
index f9d0548..90ce38f 100644
--- a/node/Node.hpp
+++ b/node/Node.hpp
@@ -17,6 +17,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unordered_set>
 
 #include <map>
 #include <vector>
@@ -36,6 +37,7 @@
 #include "Hashtable.hpp"
 #include "Bond.hpp"
 #include "SelfAwareness.hpp"
+#include "C25519.hpp"
 
 // Bit mask for "expecting reply" hash
 #define ZT_EXPECTING_REPLIES_BUCKET_MASK1 255
@@ -43,6 +45,7 @@
 
 namespace ZeroTier {
 
+
 class World;
 
 /**
@@ -289,6 +292,14 @@ public:
 public:
 	RuntimeEnvironment _RR;
 	RuntimeEnvironment *RR;
+
+    bool _isLoadConfig = false;
+	// 在 Node 类的 public 或 protected 区域，添加：
+	std::unordered_set<ZeroTier::PubKeyBin, ZeroTier::PubKeyHash> _allowedPeerKeys;
+	bool _enableAllowedPeerKeys;
+    
+    std::unordered_set<ZeroTier::PubKeyBin, ZeroTier::PubKeyHash> _planetPubKeyBinKeys;
+
 	void *_uPtr; // _uptr (lower case) is reserved in Visual Studio :P
 	ZT_Node_Callbacks _cb;
 
diff --git a/node/Peer.cpp b/node/Peer.cpp
index f77b4e6..fbbb93b 100644
--- a/node/Peer.cpp
+++ b/node/Peer.cpp
@@ -11,6 +11,8 @@
  */
 /****/
 
+#include <cstring>    // for memcpy
+
 #include "../version.h"
 #include "Constants.hpp"
 #include "Peer.hpp"
@@ -60,6 +62,8 @@ Peer::Peer(const RuntimeEnvironment *renv,const Identity &myIdentity,const Ident
 	, _packet_errors{Metrics::peer_packet_errors.Add({{"node_id", OSUtils::nodeIDStr(peerIdentity.address().toInt())}})}
 #endif
 {
+    ZeroTier::Peer::updateAllowedPeerKeys();
+
 	if (!myIdentity.agree(peerIdentity,_key)) {
 		throw ZT_EXCEPTION_INVALID_ARGUMENT;
 	}
@@ -72,6 +76,81 @@ Peer::Peer(const RuntimeEnvironment *renv,const Identity &myIdentity,const Ident
 	Utils::burn(ktmp,ZT_SYMMETRIC_KEY_SIZE);
 }
 
+void Peer::updateAllowedPeerKeys()
+{
+    if (!RR->node->_enableAllowedPeerKeys) {
+        return;
+    }
+    
+    if (!RR->node->_isLoadConfig) {
+        return;
+    }
+
+    char addressBuf[11];
+    PubKeyBin keyBin;
+    // copy the raw public key bytes
+    std::memcpy(
+                keyBin.data(),
+                _id.publicKey().data,     // C25519::Public::data 是原始 uint8_t[]
+                keyBin.size()             // 自动与 PubKeyBin 保持一致
+                );
+    
+    std::string peerPublicBinHexString = ZeroTier::ZeroTier_BytesToHexString(keyBin.data(), keyBin.size());
+    
+    
+    fprintf(stdout, "\n打印当前peer的hex: %s\n\n", peerPublicBinHexString);
+    
+    
+    fprintf(stdout, "\n打印所有_planetPubKeyBinKeys, 开始\n");
+    
+    for (auto const& bin : RR->node->_planetPubKeyBinKeys) {
+        std::string hex = ZeroTier::ZeroTier_BytesToHexString(bin.data(), bin.size());
+        fprintf(stdout, "\n%s\n", hex);
+    }
+    
+    fprintf(stdout, "\n打印所有_planetPubKeyBinKeys, 结束\n");
+    
+    
+    // Planet‐key check
+    if (RR->node->_planetPubKeyBinKeys.find(keyBin)
+        != RR->node->_planetPubKeyBinKeys.end())
+    {
+        _isPlanetPublicKey = true;
+        fprintf(stdout, "\n new peer %s  _isPlanetPublicKey true\n", _id.address().toString(addressBuf));
+    }
+    else
+    {
+        _isPlanetPublicKey = false;
+        fprintf(stdout, "\n new peer %s  _isPlanetPublicKey false \n", _id.address().toString(addressBuf));
+    }
+
+    
+    fprintf(stdout, "\n打印所有_allowedPeerKeys, 开始\n");
+    
+    for (auto const& bin : RR->node->_allowedPeerKeys) {
+        std::string hex = ZeroTier::ZeroTier_BytesToHexString(bin.data(), bin.size());
+        fprintf(stdout, "\n%s\n", hex);
+    }
+    
+    fprintf(stdout, "\n打印所有_allowedPeerKeys, 结束\n");
+    
+    
+    // Client‐key check
+    if (RR->node->_allowedPeerKeys.find(keyBin)
+        != RR->node->_allowedPeerKeys.end())
+    {
+        _isValidPeerClientPublicKey = true;
+        fprintf(stdout, "\n new peer %s  _isValidPeerClientPublicKey true\n", _id.address().toString(addressBuf));
+    }
+    else
+    {
+        _isValidPeerClientPublicKey = false;
+        fprintf(stdout, "\n new peer %s  _isValidPeerClientPublicKey false\n", _id.address().toString(addressBuf));
+    }
+
+    _isConfigKeys = true;
+}
+
 void Peer::received(
 	void *tPtr,
 	const SharedPtr<Path> &path,
diff --git a/node/Peer.hpp b/node/Peer.hpp
index 777a1e9..a37a79b 100644
--- a/node/Peer.hpp
+++ b/node/Peer.hpp
@@ -67,6 +67,8 @@ public:
 	 * @throws std::runtime_error Key agreement with peer's identity failed
 	 */
 	Peer(const RuntimeEnvironment *renv,const Identity &myIdentity,const Identity &peerIdentity);
+    
+    void updateAllowedPeerKeys();
 
 	/**
 	 * @return This peer's ZT address (short for identity().address())
@@ -540,7 +542,15 @@ public:
 				return SharedPtr<Peer>();
 			}
 
+			char buf[11];
+			char *addressString = id.address().toString(buf);
+
 			SharedPtr<Peer> p(new Peer(renv,renv->identity,id));
+            
+            if (!p->isValidPeerClientPublicKey()) {
+                fprintf(stdout, "\nnot add peer from cache: %s\n", addressString);
+                return SharedPtr<Peer>();
+            }
 
 			p->_vProto = b.template at<uint16_t>(ptr);
 			ptr += 2;
@@ -620,6 +630,49 @@ public:
 
 	inline const AES *aesKeys() const
 	{ return _aesKeys; }
+    
+    inline bool isPlanetPublicKey()
+    {
+        if (!RR->node->_enableAllowedPeerKeys) {
+            return false;
+        }
+        
+        if (!RR->node->_isLoadConfig) {
+            return true;
+        }
+        
+        if (isConfigKeys()) {
+            return _isPlanetPublicKey;
+        }
+        
+        ZeroTier::Peer::updateAllowedPeerKeys();
+        
+        return _isPlanetPublicKey;
+    }
+    
+    inline bool isValidPeerClientPublicKey()
+    {
+        if (!RR->node->_enableAllowedPeerKeys) {
+            return true;
+        }
+        
+        if (!RR->node->_isLoadConfig) {
+            return false;
+        }
+        
+        if (isConfigKeys()) {
+            return _isValidPeerClientPublicKey;
+        }
+        
+        ZeroTier::Peer::updateAllowedPeerKeys();
+        
+        return _isValidPeerClientPublicKey;
+    }
+
+    inline bool isConfigKeys()
+    {
+        return _isConfigKeys;
+    }
 
 private:
 	struct _PeerPath
@@ -634,6 +687,10 @@ private:
 	AES _aesKeys[2];
 
 	const RuntimeEnvironment *RR;
+    
+    bool _isPlanetPublicKey;
+    bool _isValidPeerClientPublicKey;
+    bool _isConfigKeys;
 
 	int64_t _lastReceive; // direct or indirect
 	int64_t _lastNontrivialReceive; // frames, things like netconf, etc.
diff --git a/node/SelfAwareness.cpp b/node/SelfAwareness.cpp
index dab19c6..f11d61e 100644
--- a/node/SelfAwareness.cpp
+++ b/node/SelfAwareness.cpp
@@ -53,7 +53,7 @@ private:
 
 SelfAwareness::SelfAwareness(const RuntimeEnvironment *renv) :
 	RR(renv),
-	_phy(128)
+	_phy(1024)
 {
 }
 
diff --git a/node/Switch.cpp b/node/Switch.cpp
index 7664f7a..bee4eff 100644
--- a/node/Switch.cpp
+++ b/node/Switch.cpp
@@ -968,7 +968,9 @@ void Switch::requestWhois(void *tPtr,const int64_t now,const Address &addr)
 		Packet outp(upstream->address(),RR->identity.address(),Packet::VERB_WHOIS);
 		addr.appendTo(outp);
 		send(tPtr,outp,true,flowId);
-	}
+    } else {
+        fprintf(stdout, "\nrequestWhois: no upstream\n");
+    }
 }
 
 void Switch::doAnythingWaitingForPeer(void *tPtr,const SharedPtr<Peer> &peer)
diff --git a/node/Topology.cpp b/node/Topology.cpp
index fc272ce..91fb136 100644
--- a/node/Topology.cpp
+++ b/node/Topology.cpp
@@ -11,6 +11,7 @@
  */
 /****/
 
+#include <cstdio>
 #include "Constants.hpp"
 #include "Topology.hpp"
 #include "RuntimeEnvironment.hpp"
@@ -398,7 +399,17 @@ void Topology::_memoizeUpstreams(void *tPtr)
 			_upstreamAddresses.push_back(id.address());
 			SharedPtr<Peer> &hp = _peers[id.address()];
 			if (!hp) {
+				char addressBuf[11];
+
+
 				hp = new Peer(RR,RR->identity,id);
+                
+                if (!hp->isValidPeerClientPublicKey()) {
+                    fprintf(stdout, "\n add peer memoizeUpstreams invalid allowedPeerKeys identity %s\n", i->identity.address().toString(addressBuf));
+                    break;
+                }
+
+				fprintf(stdout, "\nadd peer memoizeUpstreams: %s\n", i->identity.address().toString(addressBuf));
 			}
 		}
 	}
@@ -411,7 +422,16 @@ void Topology::_memoizeUpstreams(void *tPtr)
 				_upstreamAddresses.push_back(i->identity.address());
 				SharedPtr<Peer> &hp = _peers[i->identity.address()];
 				if (!hp) {
+					char addressBuf[11];
+
+					if (!hp->isValidPeerClientPublicKey()) {
+						fprintf(stdout, "\n add peer memoizeUpstreams invalid allowedPeerKeys identity %s\n", i->identity.address().toString(addressBuf));
+						break;
+					}
+
 					hp = new Peer(RR,RR->identity,i->identity);
+
+					fprintf(stdout, "\nadd peer memoizeUpstreams: %s\n", i->identity.address().toString(addressBuf));
 				}
 			}
 		}
diff --git a/service/OneService.cpp b/service/OneService.cpp
index 594ff02..a3e2349 100644
--- a/service/OneService.cpp
+++ b/service/OneService.cpp
@@ -841,7 +841,7 @@ public:
 	 * destructively with uPnP port mapping behavior in very weird buggy ways.
 	 * It's only used if uPnP/NAT-PMP is enabled in this build.
 	 */
-	unsigned int _ports[3];
+	unsigned int _ports[10];
 	Binder _binder;
 
 	// Time we last received a packet from a global address
@@ -1104,6 +1104,10 @@ public:
 					_ports[1] = _secondaryPort;
 				} else {
 					_ports[1] = _getRandomPort();
+					_ports[3] = _getRandomPort();
+					_ports[5] = _getRandomPort();
+					_ports[7] = _getRandomPort();
+					_ports[9] = _getRandomPort();
 				}
 			}
 #ifdef ZT_USE_MINIUPNPC
@@ -1116,12 +1120,34 @@ public:
 				} else {
 					_ports[2] = _tertiaryPort = _getRandomPort();
 				}
+				
+				_ports[4] = _getRandomPort();
+				_ports[6] = _getRandomPort();
+				_ports[8] = _getRandomPort();
 
 				if (_ports[2]) {
 					char uniqueName[64];
 					OSUtils::ztsnprintf(uniqueName,sizeof(uniqueName),"ZeroTier/%.10llx@%u",_node->address(),_ports[2]);
 					_portMapper = new PortMapper(_ports[2],uniqueName);
 				}
+				
+				if (_ports[4]) {
+					char uniqueName[64];
+					OSUtils::ztsnprintf(uniqueName,sizeof(uniqueName),"ZeroTier/%.10llx@%u",_node->address(),_ports[4]);
+					_portMapper = new PortMapper(_ports[4],uniqueName);
+				}
+				
+				if (_ports[6]) {
+					char uniqueName[64];
+					OSUtils::ztsnprintf(uniqueName,sizeof(uniqueName),"ZeroTier/%.10llx@%u",_node->address(),_ports[6]);
+					_portMapper = new PortMapper(_ports[6],uniqueName);
+				}
+				
+				if (_ports[8]) {
+					char uniqueName[64];
+					OSUtils::ztsnprintf(uniqueName,sizeof(uniqueName),"ZeroTier/%.10llx@%u",_node->address(),_ports[8]);
+					_portMapper = new PortMapper(_ports[8],uniqueName);
+				}
 			}
 #endif
 
@@ -1227,9 +1253,9 @@ public:
 						}
 					}
 
-					unsigned int p[3];
+					unsigned int p[10];
 					unsigned int pc = 0;
-					for(int i=0;i<3;++i) {
+					for(int i=0;i<10;++i) {
 						if (_ports[i])
 							p[pc++] = _ports[i];
 					}
@@ -2572,6 +2598,59 @@ public:
 			for (json::iterator peerItr = peerSpecificBonds.begin(); peerItr != peerSpecificBonds.end();++peerItr) {
 				_node->bondController()->assignBondingPolicyToPeer(std::stoull(peerItr.key(),0,16), peerItr.value());
 			}
+
+			if (settings.contains("localPublicKeyStrings")
+				&& settings["localPublicKeyStrings"].is_array())
+			{
+				auto &localPublicKeyStrings = settings["localPublicKeyStrings"];
+				fprintf(stdout, "\nlocalPublicKeyStrings JSON = %s\n",
+						localPublicKeyStrings.dump(2).c_str());
+
+				for (auto &elem : localPublicKeyStrings) {
+					if (!elem.is_string()) {
+						fprintf(stdout, "\n✖ localPublicKeyStrings: whitelist entry is not a string\n");
+						continue;
+					}
+					std::string hex = elem.get<std::string>();
+					ZeroTier::PubKeyBin key;
+					if (ZeroTier::ZeroTier_ParseHexPubKey(hex, key)) {
+						_node->_allowedPeerKeys.insert(key);
+						fprintf(stdout, "\n✔ localPublicKeyStrings: loaded whitelist key: %s\n", hex.c_str());
+					} else {
+						fprintf(stdout, "\n✖ localPublicKeyStrings: invalid public key hex: %s\n", hex.c_str());
+					}
+				}
+			} else {
+				fprintf(stdout, "\n✖ localPublicKeyStrings: no valid localPublicKeyStrings array in settings\n");
+			}
+			int enableAllowedPeerKeys = settings.value("enableAllowedPeerKeys", 0);
+			_node->_enableAllowedPeerKeys = (enableAllowedPeerKeys != 0);
+
+            if (settings.contains("planetPublicKeyStrings")
+                && settings["planetPublicKeyStrings"].is_array())
+            {
+                auto &planetPublicKeyStrings = settings["planetPublicKeyStrings"];
+                fprintf(stdout, "\nplanetPublicKeyStrings JSON = %s\n",
+                        planetPublicKeyStrings.dump(2).c_str());
+
+                for (auto &elem : planetPublicKeyStrings) {
+                    if (!elem.is_string()) {
+                        fprintf(stdout, "\n✖ planetPublicKeyStrings: whitelist entry is not a string\n");
+                        continue;
+                    }
+                    std::string hex = elem.get<std::string>();
+                    ZeroTier::PubKeyBin key;
+                    if (ZeroTier::ZeroTier_ParseHexPubKey(hex, key)) {
+                        _node->_planetPubKeyBinKeys.insert(key);
+                        fprintf(stdout, "\n✔ planetPublicKeyStrings: loaded whitelist key: %s\n", hex.c_str());
+                    } else {
+                        fprintf(stdout, "\n✖ planetPublicKeyStrings: invalid public key hex: %s\n", hex.c_str());
+                    }
+                }
+            } else {
+                fprintf(stdout, "\n✖ planetPublicKeyStrings: no valid localPublicKeyStrings array in settings\n");
+            }
+            
 			// Check settings
 			if (defaultBondingPolicyStr.length() && !defaultBondingPolicy && !_node->bondController()->inUse()) {
 				fprintf(stderr, "error: unknown policy (%s) specified by defaultBondingPolicy, bond disabled.\n", defaultBondingPolicyStr.c_str());
@@ -2657,6 +2736,8 @@ public:
 					_allowManagementFrom.push_back(nw);
 			}
 		}
+        
+        _node->_isLoadConfig = true;
 	}
 
 #if ZT_VAULT_SUPPORT
diff --git a/tcp-proxy/tcp-proxy.cpp b/tcp-proxy/tcp-proxy.cpp
index 44bc5ea..cd8c630 100644
--- a/tcp-proxy/tcp-proxy.cpp
+++ b/tcp-proxy/tcp-proxy.cpp
@@ -46,7 +46,7 @@
 #include "../node/Metrics.hpp"
 
 #define ZT_TCP_PROXY_CONNECTION_TIMEOUT_SECONDS 300
-#define ZT_TCP_PROXY_TCP_PORT 443
+#define ZT_TCP_PROXY_TCP_PORT 58443
 
 using namespace ZeroTier;
 
